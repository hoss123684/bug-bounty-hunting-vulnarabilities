How the Internet Started
Background: Originated as ARPANET in the late 1960s, a project by the U.S. Department of Defense for communication in the event of a nuclear threat.
Evolution: Moved from a small research network to the global, decentralized network we know as the Internet, connecting billions worldwide.
Core Idea: Connect disparate networks via standardized protocols (TCP/IP), which allowed various devices to communicate reliably.
Domain Name System (DNS)
Purpose: Translates human-readable domain names (e.g., example.com) to IP addresses that computers use to locate each other.
Structure: Hierarchical, with root servers, Top-Level Domains (TLDs), and domain names.
Key Vulnerabilities: DNS spoofing, cache poisoning, and unauthorized zone transfers.
Collecting Domains Using NsLookup
NsLookup: Command-line tool to query DNS records.
Usage: Execute nslookup <domain> to retrieve the IP address of the specified domain.
Common Applications: Collect subdomains, check DNS records like MX, A, and PTR, and assess potential misconfigurations.
HTTPS (Hypertext Transfer Protocol Secure)
Definition: Secure version of HTTP, encrypting data between client and server via TLS/SSL.
Purpose: Ensures data confidentiality and integrity, preventing MITM (Man-in-the-Middle) attacks.
Indicators: URLs start with https://, and browsers often display a padlock icon.
URL (Uniform Resource Locator)
Structure: scheme://host:port/path?query#fragment
scheme: Protocol (e.g., HTTP, HTTPS).
host: Domain name or IP address.
port: Optional (default ports are 80 for HTTP, 443 for HTTPS).
path, query, fragment: Specify location, parameters, and internal links.
Usage in Pentesting: URL parameters in the query string can be potential injection points.
HTTPS Request
Components: Composed of a request line, headers, and an optional body.
Request Line: Contains method (e.g., GET), URL, and HTTP version.
Headers: Key-value pairs for metadata (e.g., User-Agent, Host).
Body: Optional, often used with methods like POST.
Pentesting Focus: Headers and query parameters may leak sensitive information or allow injections.
HTTPS Response
Components: Status line, headers, and body.
Status Line: Includes HTTP version and status code (e.g., 200 OK).
Headers: Metadata about the response (e.g., Content-Type, Set-Cookie).
Body: HTML, JSON, or other data sent from the server.
Focus: Analyze response codes and headers for clues about server software, exposed resources, or misconfigurations.
HTTP Methods
GET: Retrieve data from the server (no request body).
POST: Submit data to the server (includes a body).
PUT: Update or create a resource.
DELETE: Delete a resource.
HEAD: Similar to GET but retrieves headers only.
OPTIONS: Returns HTTP methods supported by the server.
PATCH: Partially updates a resource.
Key Considerations: Methods like PUT and DELETE can pose risks if left exposed.
HTTP Response Codes (Common)
2xx Success: Successful request (e.g., 200 OK, 204 No Content).
3xx Redirection: Further action needed (e.g., 301 Moved Permanently, 302 Found).
4xx Client Errors: Issue with client request (e.g., 400 Bad Request, 403 Forbidden, 404 Not Found).
5xx Server Errors: Server failed to process (e.g., 500 Internal Server Error, 502 Bad Gateway).
Relevance: Codes like 403 and 404 can reveal restricted areas, while 500+ codes can indicate vulnerabilities.
